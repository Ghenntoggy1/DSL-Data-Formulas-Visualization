# Generated from D:/Programming/Projects/DSL/DSL_Data_Formulas_Visualization/Grammar/DSL_Data_Formulas_Visualization_Grammar.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,375,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
        16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
        20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,
        22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,4,24,260,8,
        24,11,24,12,24,261,1,24,5,24,265,8,24,10,24,12,24,268,9,24,1,25,
        1,25,4,25,272,8,25,11,25,12,25,273,1,25,1,25,1,26,1,26,1,26,1,26,
        5,26,282,8,26,10,26,12,26,285,9,26,1,26,1,26,1,26,1,27,1,27,5,27,
        292,8,27,10,27,12,27,295,9,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
        1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,
        329,8,36,1,37,3,37,332,8,37,1,37,4,37,335,8,37,11,37,12,37,336,1,
        37,1,37,4,37,341,8,37,11,37,12,37,342,3,37,345,8,37,1,38,1,38,1,
        39,4,39,350,8,39,11,39,12,39,351,1,39,1,39,1,40,1,40,1,40,1,41,1,
        41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,
        46,1,47,1,47,1,283,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,87,44,89,45,91,46,93,47,95,48,1,0,8,4,0,47,47,65,90,95,95,
        97,122,4,0,47,57,65,90,95,95,97,122,4,0,46,57,65,90,95,95,97,122,
        2,0,10,10,13,13,2,0,42,42,94,94,2,0,43,43,45,45,1,0,48,57,3,0,9,
        10,13,13,32,32,389,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
        0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
        0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,1,0,0,
        0,3,102,1,0,0,0,5,110,1,0,0,0,7,115,1,0,0,0,9,118,1,0,0,0,11,123,
        1,0,0,0,13,129,1,0,0,0,15,135,1,0,0,0,17,143,1,0,0,0,19,152,1,0,
        0,0,21,165,1,0,0,0,23,179,1,0,0,0,25,193,1,0,0,0,27,204,1,0,0,0,
        29,210,1,0,0,0,31,214,1,0,0,0,33,218,1,0,0,0,35,223,1,0,0,0,37,227,
        1,0,0,0,39,231,1,0,0,0,41,235,1,0,0,0,43,239,1,0,0,0,45,244,1,0,
        0,0,47,250,1,0,0,0,49,259,1,0,0,0,51,269,1,0,0,0,53,277,1,0,0,0,
        55,289,1,0,0,0,57,296,1,0,0,0,59,298,1,0,0,0,61,300,1,0,0,0,63,302,
        1,0,0,0,65,304,1,0,0,0,67,306,1,0,0,0,69,308,1,0,0,0,71,310,1,0,
        0,0,73,328,1,0,0,0,75,331,1,0,0,0,77,346,1,0,0,0,79,349,1,0,0,0,
        81,355,1,0,0,0,83,358,1,0,0,0,85,361,1,0,0,0,87,363,1,0,0,0,89,365,
        1,0,0,0,91,368,1,0,0,0,93,371,1,0,0,0,95,373,1,0,0,0,97,98,5,68,
        0,0,98,99,5,97,0,0,99,100,5,116,0,0,100,101,5,97,0,0,101,2,1,0,0,
        0,102,103,5,100,0,0,103,104,5,97,0,0,104,105,5,116,0,0,105,106,5,
        97,0,0,106,107,5,115,0,0,107,108,5,101,0,0,108,109,5,116,0,0,109,
        4,1,0,0,0,110,111,5,110,0,0,111,112,5,97,0,0,112,113,5,109,0,0,113,
        114,5,101,0,0,114,6,1,0,0,0,115,116,5,105,0,0,116,117,5,102,0,0,
        117,8,1,0,0,0,118,119,5,101,0,0,119,120,5,108,0,0,120,121,5,115,
        0,0,121,122,5,101,0,0,122,10,1,0,0,0,123,124,5,114,0,0,124,125,5,
        97,0,0,125,126,5,110,0,0,126,127,5,103,0,0,127,128,5,101,0,0,128,
        12,1,0,0,0,129,130,5,119,0,0,130,131,5,104,0,0,131,132,5,105,0,0,
        132,133,5,108,0,0,133,134,5,101,0,0,134,14,1,0,0,0,135,136,5,70,
        0,0,136,137,5,111,0,0,137,138,5,114,0,0,138,139,5,109,0,0,139,140,
        5,117,0,0,140,141,5,108,0,0,141,142,5,97,0,0,142,16,1,0,0,0,143,
        144,5,82,0,0,144,145,5,101,0,0,145,146,5,97,0,0,146,147,5,100,0,
        0,147,148,5,70,0,0,148,149,5,114,0,0,149,150,5,111,0,0,150,151,5,
        109,0,0,151,18,1,0,0,0,152,153,5,69,0,0,153,154,5,120,0,0,154,155,
        5,112,0,0,155,156,5,111,0,0,156,157,5,114,0,0,157,158,5,116,0,0,
        158,159,5,84,0,0,159,160,5,111,0,0,160,161,5,70,0,0,161,162,5,105,
        0,0,162,163,5,108,0,0,163,164,5,101,0,0,164,20,1,0,0,0,165,166,5,
        69,0,0,166,167,5,120,0,0,167,168,5,112,0,0,168,169,5,111,0,0,169,
        170,5,114,0,0,170,171,5,116,0,0,171,172,5,84,0,0,172,173,5,111,0,
        0,173,174,5,73,0,0,174,175,5,109,0,0,175,176,5,97,0,0,176,177,5,
        103,0,0,177,178,5,101,0,0,178,22,1,0,0,0,179,180,5,86,0,0,180,181,
        5,105,0,0,181,182,5,115,0,0,182,183,5,117,0,0,183,184,5,97,0,0,184,
        185,5,108,0,0,185,186,5,70,0,0,186,187,5,111,0,0,187,188,5,114,0,
        0,188,189,5,109,0,0,189,190,5,117,0,0,190,191,5,108,0,0,191,192,
        5,97,0,0,192,24,1,0,0,0,193,194,5,86,0,0,194,195,5,105,0,0,195,196,
        5,115,0,0,196,197,5,117,0,0,197,198,5,97,0,0,198,199,5,108,0,0,199,
        200,5,68,0,0,200,201,5,97,0,0,201,202,5,116,0,0,202,203,5,97,0,0,
        203,26,1,0,0,0,204,205,5,103,0,0,205,206,5,114,0,0,206,207,5,97,
        0,0,207,208,5,112,0,0,208,209,5,104,0,0,209,28,1,0,0,0,210,211,5,
        98,0,0,211,212,5,97,0,0,212,213,5,114,0,0,213,30,1,0,0,0,214,215,
        5,112,0,0,215,216,5,105,0,0,216,217,5,101,0,0,217,32,1,0,0,0,218,
        219,5,104,0,0,219,220,5,105,0,0,220,221,5,115,0,0,221,222,5,116,
        0,0,222,34,1,0,0,0,223,224,5,112,0,0,224,225,5,110,0,0,225,226,5,
        103,0,0,226,36,1,0,0,0,227,228,5,106,0,0,228,229,5,112,0,0,229,230,
        5,103,0,0,230,38,1,0,0,0,231,232,5,99,0,0,232,233,5,115,0,0,233,
        234,5,118,0,0,234,40,1,0,0,0,235,236,5,116,0,0,236,237,5,120,0,0,
        237,238,5,116,0,0,238,42,1,0,0,0,239,240,5,106,0,0,240,241,5,115,
        0,0,241,242,5,111,0,0,242,243,5,110,0,0,243,44,1,0,0,0,244,245,5,
        101,0,0,245,246,5,120,0,0,246,247,5,99,0,0,247,248,5,101,0,0,248,
        249,5,108,0,0,249,46,1,0,0,0,250,251,5,99,0,0,251,252,5,111,0,0,
        252,253,5,110,0,0,253,254,5,115,0,0,254,255,5,111,0,0,255,256,5,
        108,0,0,256,257,5,101,0,0,257,48,1,0,0,0,258,260,7,0,0,0,259,258,
        1,0,0,0,260,261,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,266,
        1,0,0,0,263,265,7,1,0,0,264,263,1,0,0,0,265,268,1,0,0,0,266,264,
        1,0,0,0,266,267,1,0,0,0,267,50,1,0,0,0,268,266,1,0,0,0,269,271,5,
        34,0,0,270,272,7,2,0,0,271,270,1,0,0,0,272,273,1,0,0,0,273,271,1,
        0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,276,5,34,0,0,276,52,1,
        0,0,0,277,278,5,47,0,0,278,279,5,42,0,0,279,283,1,0,0,0,280,282,
        9,0,0,0,281,280,1,0,0,0,282,285,1,0,0,0,283,284,1,0,0,0,283,281,
        1,0,0,0,284,286,1,0,0,0,285,283,1,0,0,0,286,287,5,42,0,0,287,288,
        5,47,0,0,288,54,1,0,0,0,289,293,5,35,0,0,290,292,8,3,0,0,291,290,
        1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,56,1,
        0,0,0,295,293,1,0,0,0,296,297,5,59,0,0,297,58,1,0,0,0,298,299,5,
        58,0,0,299,60,1,0,0,0,300,301,5,44,0,0,301,62,1,0,0,0,302,303,5,
        40,0,0,303,64,1,0,0,0,304,305,5,41,0,0,305,66,1,0,0,0,306,307,5,
        61,0,0,307,68,1,0,0,0,308,309,5,91,0,0,309,70,1,0,0,0,310,311,5,
        93,0,0,311,72,1,0,0,0,312,329,7,4,0,0,313,314,5,108,0,0,314,315,
        5,111,0,0,315,329,5,103,0,0,316,317,5,115,0,0,317,318,5,113,0,0,
        318,329,5,114,0,0,319,320,5,115,0,0,320,321,5,113,0,0,321,322,5,
        114,0,0,322,329,5,116,0,0,323,324,5,102,0,0,324,325,5,97,0,0,325,
        326,5,99,0,0,326,329,5,116,0,0,327,329,7,5,0,0,328,312,1,0,0,0,328,
        313,1,0,0,0,328,316,1,0,0,0,328,319,1,0,0,0,328,323,1,0,0,0,328,
        327,1,0,0,0,329,74,1,0,0,0,330,332,5,45,0,0,331,330,1,0,0,0,331,
        332,1,0,0,0,332,334,1,0,0,0,333,335,7,6,0,0,334,333,1,0,0,0,335,
        336,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,344,1,0,0,0,338,
        340,9,0,0,0,339,341,7,6,0,0,340,339,1,0,0,0,341,342,1,0,0,0,342,
        340,1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,0,344,338,1,0,0,0,344,
        345,1,0,0,0,345,76,1,0,0,0,346,347,5,46,0,0,347,78,1,0,0,0,348,350,
        7,7,0,0,349,348,1,0,0,0,350,351,1,0,0,0,351,349,1,0,0,0,351,352,
        1,0,0,0,352,353,1,0,0,0,353,354,6,39,0,0,354,80,1,0,0,0,355,356,
        5,61,0,0,356,357,5,61,0,0,357,82,1,0,0,0,358,359,5,33,0,0,359,360,
        5,61,0,0,360,84,1,0,0,0,361,362,5,62,0,0,362,86,1,0,0,0,363,364,
        5,60,0,0,364,88,1,0,0,0,365,366,5,62,0,0,366,367,5,61,0,0,367,90,
        1,0,0,0,368,369,5,60,0,0,369,370,5,61,0,0,370,92,1,0,0,0,371,372,
        5,123,0,0,372,94,1,0,0,0,373,374,5,125,0,0,374,96,1,0,0,0,12,0,261,
        266,273,283,293,328,331,336,342,344,351,1,6,0,0
    ]

class DSL_Data_Formulas_Visualization_GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DATA = 1
    DATASET = 2
    NAME = 3
    IF = 4
    ELSE = 5
    RANGE = 6
    WHILE = 7
    FORMULA_T = 8
    READ_FROM = 9
    EXPORT_TO_FILE = 10
    EXPORT_TO_IMAGE = 11
    VISUAL_FORMULA = 12
    VISUAL_DATA = 13
    GRAPH = 14
    BAR = 15
    PIE = 16
    HIST = 17
    PNG = 18
    JPG = 19
    CSV = 20
    TEXT = 21
    JSON = 22
    EXCEL = 23
    CONSOLE = 24
    ID = 25
    PATH = 26
    COMMENT_BLOCK = 27
    COMMENT_LINE = 28
    SEMICOLON = 29
    COLON = 30
    COMMA = 31
    LPAREN = 32
    RPAREN = 33
    ASSIGN = 34
    LBRACKET = 35
    RBRACKET = 36
    OPERATORS = 37
    DIGIT = 38
    DOT = 39
    WS = 40
    EQUAL = 41
    NOT_EQUAL = 42
    GREATER = 43
    LESS = 44
    GREATER_EQUAL = 45
    LESS_EQUAL = 46
    LBRACE = 47
    RBRACE = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Data'", "'dataset'", "'name'", "'if'", "'else'", "'range'", 
            "'while'", "'Formula'", "'ReadFrom'", "'ExportToFile'", "'ExportToImage'", 
            "'VisualFormula'", "'VisualData'", "'graph'", "'bar'", "'pie'", 
            "'hist'", "'png'", "'jpg'", "'csv'", "'txt'", "'json'", "'excel'", 
            "'console'", "';'", "':'", "','", "'('", "')'", "'='", "'['", 
            "']'", "'.'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", 
            "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "DATA", "DATASET", "NAME", "IF", "ELSE", "RANGE", "WHILE", "FORMULA_T", 
            "READ_FROM", "EXPORT_TO_FILE", "EXPORT_TO_IMAGE", "VISUAL_FORMULA", 
            "VISUAL_DATA", "GRAPH", "BAR", "PIE", "HIST", "PNG", "JPG", 
            "CSV", "TEXT", "JSON", "EXCEL", "CONSOLE", "ID", "PATH", "COMMENT_BLOCK", 
            "COMMENT_LINE", "SEMICOLON", "COLON", "COMMA", "LPAREN", "RPAREN", 
            "ASSIGN", "LBRACKET", "RBRACKET", "OPERATORS", "DIGIT", "DOT", 
            "WS", "EQUAL", "NOT_EQUAL", "GREATER", "LESS", "GREATER_EQUAL", 
            "LESS_EQUAL", "LBRACE", "RBRACE" ]

    ruleNames = [ "DATA", "DATASET", "NAME", "IF", "ELSE", "RANGE", "WHILE", 
                  "FORMULA_T", "READ_FROM", "EXPORT_TO_FILE", "EXPORT_TO_IMAGE", 
                  "VISUAL_FORMULA", "VISUAL_DATA", "GRAPH", "BAR", "PIE", 
                  "HIST", "PNG", "JPG", "CSV", "TEXT", "JSON", "EXCEL", 
                  "CONSOLE", "ID", "PATH", "COMMENT_BLOCK", "COMMENT_LINE", 
                  "SEMICOLON", "COLON", "COMMA", "LPAREN", "RPAREN", "ASSIGN", 
                  "LBRACKET", "RBRACKET", "OPERATORS", "DIGIT", "DOT", "WS", 
                  "EQUAL", "NOT_EQUAL", "GREATER", "LESS", "GREATER_EQUAL", 
                  "LESS_EQUAL", "LBRACE", "RBRACE" ]

    grammarFileName = "DSL_Data_Formulas_Visualization_Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


